// GET LIST OF OBJECT SPLIT INTO 20 THEN FETCH THE 20 OBJECT

import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import {
  IResult,
  ISearchParam,
  ISearchResult,
  ISearchState,
} from '../../model/ISearch';
import { fetchSearchResults } from './searchAPI';

const DEFAULT_PAGE_SIZE = 20;

export const initialState: ISearchState = {
  total: 0,
  entities: [],
  status: 'idle',
  error: '',
  page: {
    pageSize: DEFAULT_PAGE_SIZE,
    pageNumber: 0,
    totalNumber: 0,
    totalPages: 0,
  },
  searchParam: {
    q: '',
    isHighlight: false,
    title: '',
    tags: false,
    departmentId: '',
    isOnView: false,
    artistOrCulture: false,
    medium: '',
    geoLocation: '',
    dateBegin: '',
    dateEnd: '',
  },
};

export const fetchArts = createAsyncThunk(
  'search/fetchArts',
  async ({
    pageNumber,
    pageSize,
    params,
  }: {
    pageNumber: number;
    pageSize: number;
    params: ISearchParam;
  }): Promise<ISearchResult> => {
    const result = await fetchSearchResults(params);
    const data: IResult = await result.json();

    return {
      pageNumber,
      pageSize,
      params,
      total: data?.total,
      objectId: data?.objectId,
    };
  }
);

export const SearchSlice = createSlice({
  name: 'search',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchArts.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchArts.fulfilled, (state, action) => {
        state.status = 'idle';
        // todo

        console.log('data......', action.payload);
      })
      .addCase(fetchArts.rejected, (state, { payload }) => {
        state.status = 'failed';

        if (payload) {
          console.log('error...........', payload);
        }
      });
  },
});

export const getSearchStatus = (state: RootState) => state.search.status;

export default SearchSlice.reducer;
