import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { IArtObject, IArtState } from '../../model/IArtObject';
import { fetchArtObjectById } from './artAPI';

export const initialState: IArtState = {
  status: 'idle',
  error: '',
  entities: undefined,
};

export const fetchArtById = createAsyncThunk(
  'search/fetchArt',
  async (id: string): Promise<IArtObject> => {
    const result = await fetchArtObjectById(id);
    return await result.json();
  }
);

export const artSlice = createSlice({
  name: 'arts',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchArtById.pending, (state, action) => {
        console.log('loading art...', action);
      })
      .addCase(fetchArtById.fulfilled, (state, action) => {
        // todo
        console.log('data......', action.payload);
      })
      .addCase(fetchArtById.rejected, (state, { payload }) => {
        if (payload) {
          console.log('error...........', payload);
        }
      });
  },
});

export default artSlice.reducer;
